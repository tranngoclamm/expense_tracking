import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:trackizer/model/user-model.dart';

class UserService {
  final CollectionReference _userCollection =
      FirebaseFirestore.instance.collection('users');

  // H√†m ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
  Future<void> updateUser(UserModel user) async {
    try {
      await _userCollection.doc(user.uid).update(user.toJson());
    } catch (e) {
      print('Error updating user: $e');
    }
  }

  // C·∫≠p nh·∫≠t quy·ªÅn c·ªßa ng∆∞·ªùi d√πng (ch·ªâ admin c√≥ th·ªÉ l√†m)
  Future<void> updateUserRole(String adminUid, String targetUid, String newRole) async {
    try {
      UserModel? adminUser = await getUserByUid(adminUid);
      if (adminUser == null || adminUser.role != 'Admin') {
        print('B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a vai tr√≤');
        return;
      }

      await _userCollection.doc(targetUid).update({'role': newRole});
      print('C·∫≠p nh·∫≠t vai tr√≤ th√†nh c√¥ng');
    } catch (e) {
      print('L·ªói khi c·∫≠p nh·∫≠t vai tr√≤: $e');
    }
  }

  // H√†m ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo UID
  Future<UserModel?> getUserByUid(String uid) async {
    try {
      DocumentSnapshot doc = await _userCollection.doc(uid).get();
      if (doc.exists) {
        return UserModel.fromJson(doc.data() as Map<String, dynamic>);
      } else {
        print('User not found');
        return null;
      }
    } catch (e) {
      print('Error getting user: $e');
      return null;
    }
  }

// L·∫•y danh s√°ch ng∆∞·ªùi d√πng (ch·ªâ admin m·ªõi c√≥ th·ªÉ xem)
  Stream<List<UserModel>> getUsers(String currentUid) async* {
    UserModel? currentUser = await getUserByUid(currentUid);
    if (currentUser == null || currentUser.role != 'Admin') {
      print('B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch t√†i kho·∫£n');
      yield [];
      return;
    }

    yield* _userCollection.snapshots().map((snapshot) {
      print("üìÑ Firestore tr·∫£ v·ªÅ ${snapshot.docs.length} t√†i kho·∫£n");

      return snapshot.docs.map((doc) {
        Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
        print("üìå D·ªØ li·ªáu t·ª´ Firestore: $data");

        return UserModel.fromJson(data);
      }).toList();
    });
  }

  // X√≥a t√†i kho·∫£n (admin c√≥ th·ªÉ x√≥a t√†i kho·∫£n b·∫•t k·ª≥, user ch·ªâ x√≥a ƒë∆∞·ª£c t√†i kho·∫£n c·ªßa ch√≠nh h·ªç)
  Future<void> deleteUser(String requesterUid, String targetUid) async {
    try {
      UserModel? requester = await getUserByUid(requesterUid);
      if (requester == null) {
        print('Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i');
        return;
      }

      // Ch·ªâ admin m·ªõi c√≥ quy·ªÅn x√≥a t√†i kho·∫£n kh√°c, user ch·ªâ x√≥a ƒë∆∞·ª£c t√†i kho·∫£n c·ªßa ch√≠nh h·ªç
      if (requester.role != 'Admin' && requesterUid != targetUid) {
        print('B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a t√†i kho·∫£n n√†y');
        return;
      }

      await _userCollection.doc(targetUid).delete();
      print('X√≥a t√†i kho·∫£n th√†nh c√¥ng');
    } catch (e) {
      print('L·ªói khi x√≥a t√†i kho·∫£n: $e');
    }
  }

  // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i admin kh√¥ng
  Future<bool> isAdmin(String uid) async {
    try {
      UserModel? user = await getUserByUid(uid);
      return user != null && user.role == 'Admin';
    } catch (e) {
      print('L·ªói ki·ªÉm tra quy·ªÅn admin: $e');
      return false;
    }
  }

}


